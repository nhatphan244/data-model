import pandas as pd
import tkinter as tk
import re
from datetime import datetime
from tkinter import filedialog
import sqlite3
conn= sqlite3.connect('telecom_database.db')
cursor = conn.cursor()

duplicate_col = [
    'ShortName', 'Name', 'ImageId','BusinessLicense','TaxCode','PhoneNumber'
]

num_col =[
    'BusinessLicense','TaxCode'
]
teleco_col =[
    'PhoneNumber','FaxNumber'
]

mandatory_col = [
    'ShortName', 'Name', 'PhoneNumber'
]

vn_col = [
    'Name', 'Address'
]

date_col = [
    'JoinDate','DateOfEstablishment'
]
teleco_errors_message ={
    'PhoneNumber'  : 'Đầu số điện thoại phải thuộc nhà mạng',
    'FaxNumber'    : 'Đầu số của số Fax phải thuộc nhà mạng'

}

num_errors_message ={
    'BusinessLicense': "Giấy phép kinh doanh không hợp lệ",
    'TaxCode' : "Mã số thuế không hợp lệ"
}
date_errors_message ={
    'JoinDate': "Ngày tham gia không hợp lệ, ",
    'DateOfEstablishment' : "Ngày thành lập không hợp lệ "
}
duplicate_errors_message = {
    'ShortName': "Tên viết tắt không được trùng!",
    'Name': "Tên nhà sản xuất không được trùng!",
    'ImageId': "Mã định danh hình ảnh không được trùng!",
    'BusinessLicense': "Giấy phép kinh doanh không được trùng!",
    'TaxCode' : "Mã số thuế không được trùng!",
    'PhoneNumber': "Số điện thoại không được trùng!"
}


Non_Vietnamese_errors_message = {
    'Name': "Tên nhà sản xuất phải là tiếng Việt có dấu",
    'Address': "Địa chỉ phải là tiếng Việt có dấu"
}

vietnamese_pattern = r'[àảãáạăằẳẵắặâầẩẫấậèẻẽéẹêềểễếệìỉĩíịòỏõóọôồổỗốộơờởỡớợùủũúụưừửữứựỳỷỹýỵđÀẢÃÁẠĂẰẲẴẮẶÂẦẨẪẤẬÈẺẼÉẸÊỀỂỄẾỆÌỈĨÍỊÒỎÕÓỌÔỒỔỖỐỘƠỜỞỠỚỢÙỦŨÚỤƯỪỬỮỨỰỲỶỸÝỴĐ]'
vietnamese_ruleset = re.compile(vietnamese_pattern)
 
def validate_vietnamese(text):
    return bool(vietnamese_ruleset.search(text))

def validate_date(column_name, date_value):
    current_date = datetime.now().date()
    if pd.isna(date_value) or date_value == '':
        return True, "" 
    
    if isinstance(date_value, datetime):
        date_obj = date_value.date()
    elif isinstance(date_value, str):
        try:
            date_obj = datetime.strptime(date_value, '%d/%m/%Y').date()
        except ValueError:
            return False, date_errors_message[column_name] + " định dạng phải là dd/mm/yyyy."
    else:
        return False, date_errors_message[column_name] + " định dạng phải là dd/mm/yyyy."
    
    if column_name == 'JoinDate':
        if date_obj > current_date:
            return True, ""  
        elif date_obj == current_date:
            return True, ""  
        else:
            return False, date_errors_message[column_name] + " không được là ngày trong quá khứ."
    
    return True, ""


def validation(df):
    errors = []
    #Check file trắng
    if df.empty:
        errors.append("File trống!")
        return errors
    #check ô trống
    for column in mandatory_col:
        if df[column].isnull().any():
            for index, value in df[df[column].isnull()].iterrows():
                errors.append(f"Lỗi ở dòng {index+2}, {column}: Bạn điền thiếu thông tin!")
    #check duplicate
    for column in duplicate_col:
       non_blank_rows = df[df[column].notna()]
       duplicate_values = non_blank_rows[non_blank_rows.duplicated(column, keep='first')]
       for index, value in duplicate_values.iterrows():
            errors.append(f"Lỗi ở dòng {index+2}, {column}: {duplicate_errors_message.get(column)}")

    #Check tiếng việt
    for column in vn_col:
        for index, value in df.iterrows():
            cell_value = value[column]
            if isinstance(cell_value, str) and not validate_vietnamese(cell_value):
                errors.append(f"Lỗi ở dòng {index+2}, {column}: {Non_Vietnamese_errors_message.get(column)}")
                 
    #Check format ngày giờ
    for column in date_col:
        for index, row in df.iterrows():
            date_value = row[column]
            valid, message = validate_date(column, date_value)
            if not valid:
                errors.append(f"Lỗi ở dòng {index+2}, {column}: {message}")

    #Check số BusinessLicense, TaxCode
    for index, row in df.iterrows():
        for column in num_col:
            if column in df.columns:
                num_value = row[column]
                if pd.notna(num_value):
                    try:
                        num_value = float(num_value)
                    except ValueError:
                        errors.append(f"Lỗi ở dòng {index + 1}, {column}: {num_errors_message.get(column)}")


    #Check số Fax và PhoneNumber phải thuộc Teleco:
    #for column in teleco_col:
       # if column in df.columns:
           


    errors.sort(key=lambda x: (int(x.split(',')[0].split(' ')[-1]), x.split(',')[1])) #Sort lỗi theo dòng + cột
    return errors

def read_excel(filepath):
    try:
        df = pd.read_excel(filepath)
        return df
    except Exception as e:
        print(f"Không load được DF: {str(e)}")
        return None

def main():
    root = tk.Tk()
    root.withdraw() 
    filepath = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
    if filepath: 
        df = read_excel(filepath)
        if df is not None:
            errors = validation(df)
            if errors:
                for error in errors:
                    print(error)
            else:
                print("Hem có lỗi.")
    else:
        print("Không có file được chọn")

if __name__ == "__main__":
    main()
conn.close
