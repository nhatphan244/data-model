import requests
import matplotlib.pyplot as plt
import geopandas as gpd

def find_relation_id(province, district, ward):
    overpass_url = "http://overpass-api.de/api/interpreter"
    overpass_query = f"""
    [out:json][timeout:25];
    area[name="{province}"]->.province;
    area[name="{district}"]->.district;
    area[name="{ward}"]->.ward;
    rel(area.ward);
    out body;
    """
    response = requests.get(overpass_url, params={'data': overpass_query})
    data = response.json()
    for element in data['elements']:
        if 'type' in element and element['type'] == 'relation':
            return element['id']
    return None

def fetch_and_save_osm_data(relation_id, filename="relation.geojson"):
    overpass_url = "http://overpass-api.de/api/interpreter"
    overpass_query = f"""
    [out:xml][timeout:25];
    (relation({relation_id});
    );
    out body;
    >;
    out skel qt;
    """
    response = requests.get(overpass_url, params={'data': overpass_query})
    # Save response content to a text file in text mode
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(response.text)  # using response.text to handle text data

def plot_geojson(filename, ward):
    # Read GeoJSON file
    gdf = gpd.read_file(filename)

    # Plot the GeoDataFrame
    fig, ax = plt.subplots(figsize=(10, 10))
    gdf.plot(ax=ax, color='blue', edgecolor='black')

    # Add title and labels
    ax.set_title(f"Biểu đồ phường {ward}")
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')

    # Show plot
    plt.show()

def main():
    province = "Thành phố Hà Nội"  # Replace with actual province name
    district = "Huyện Thanh Trì"  # Replace with actual district name
    ward = "Xã Tân Triều"  # Replace with actual ward name
    relation_id = find_relation_id(province, district, ward)
    fetch_and_save_osm_data(relation_id)
    plot_geojson("relation.geojson", ward)

if __name__ == "__main__":
    main()
