import requests
import osmnx as ox
import matplotlib.pyplot as plt

def find_relation_id(province, district, ward):
    overpass_url = "http://overpass-api.de/api/interpreter"
    overpass_query = f"""
    [out:json][timeout:25];
    area[name="{province}"]->.province;
    area[name="{district}"]->.district;
    area[name="{ward}"]->.ward;
    rel(area.ward);
    out body;
    """
    response = requests.get(overpass_url, params={'data': overpass_query})
    data = response.json()
    for element in data['elements']:
        if 'type' in element and element['type'] == 'relation':
            return element['id']
    return None

def fetch_and_save_osm_data(relation_id, filename="relation.geojson"):
    if relation_id is None:
        print("No valid relation ID found.")
        return

    overpass_url = "http://overpass-api.de/api/interpreter"
    overpass_query = f"""
    [out:json][timeout:25];
    (relation({relation_id});
    );
    out body;
    >;
    out skel qt;
    """
    response = requests.get(overpass_url, params={'data': overpass_query})
    gdf = ox.geometries_from_xml(response.content)
    gdf.to_file(filename, driver='GeoJSON')

def plot_geojson_file(filename="relation.geojson"):
    import geopandas as gpd
    gdf = gpd.read_file(filename)
    gdf.plot()
    plt.show()

def main():
    province = "Province Name"  # Replace with actual province name
    district = "District Name"  # Replace with actual district name
    ward = "Ward Name"  # Replace with actual ward name

    relation_id = find_relation_id(province, district, ward)
    if relation_id:
        print(f"The relation ID for {province}, {district}, {ward} is {relation_id}")
        fetch_and_save_osm_data(relation_id)
        plot_geojson_file()
    else:
        print("Relation ID not found. Please check the names and try again.")

if __name__ == "__main__":
    main()
